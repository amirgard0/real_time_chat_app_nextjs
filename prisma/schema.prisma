// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  publicId      String    @unique
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  password      String?

  isOnline Boolean   @default(false)
  lastSeen DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  groups        GroupMember[]
  messages      Message[]
  createdGroups Group[]       @relation("GroupCreator")

  sentMessages PrivateMessage[] @relation("SentMessages")

  chats1 PrivateChat[] @relation("ChatUser1")
  chats2 PrivateChat[] @relation("ChatUser2")

  privateChatId String?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Group {
  id          String   @id @default(cuid())
  name        String
  description String?
  avatar      String?
  isPrivate   Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  creatorId String
  creator   User          @relation("GroupCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  members   GroupMember[]
  messages  Message[]

  @@map("groups")
}

model GroupMember {
  id         String    @id @default(cuid())
  userId     String
  groupId    String
  joinedAt   DateTime  @default(now())
  mutedUntil DateTime?

  // Relationships
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  group Group @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([userId, groupId])
  @@map("group_members")
}

model Message {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  userId  String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  groupId String
  group   Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model PrivateChat {
  id       String           @id @default(cuid())
  user1    User             @relation("ChatUser1", fields: [user1Id], references: [id])
  user2    User             @relation("ChatUser2", fields: [user2Id], references: [id])
  user1Id  String
  user2Id  String
  messages PrivateMessage[]

  // Ensure unique combinations of users
  @@unique([user1Id, user2Id])
  @@map("private_chats")
}

model PrivateMessage {
  id        String    @id @default(cuid())
  content   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  senderId  String
  chatId    String
  isRead    Boolean   @default(false)
  readAt    DateTime?

  // Relationships
  sender User        @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  chat   PrivateChat @relation(fields: [chatId], references: [id], onDelete: Cascade)

  @@index([createdAt])
  @@map("private_messages")
}
